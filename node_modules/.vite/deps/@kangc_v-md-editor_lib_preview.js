import {
  require_vue
} from "./chunk-LSY6FXIB.js";
import "./chunk-NEYIEXQB.js";
import {
  __commonJS
} from "./chunk-CEQRFMJQ.js";

// node_modules/.pnpm/@kangc+v-md-editor@2.3.18_@vue+compiler-sfc@3.4.21_vue@3.4.21/node_modules/@kangc/v-md-editor/lib/preview.js
var require_preview = __commonJS({
  "node_modules/.pnpm/@kangc+v-md-editor@2.3.18_@vue+compiler-sfc@3.4.21_vue@3.4.21/node_modules/@kangc/v-md-editor/lib/preview.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_vue());
      else if (typeof define === "function" && define.amd)
        define("VMdEditor", ["vue"], factory);
      else if (typeof exports === "object")
        exports["VMdEditor"] = factory(require_vue());
      else
        root["VMdEditor"] = factory(root["Vue"]);
    })(typeof self !== "undefined" ? self : exports, function(__WEBPACK_EXTERNAL_MODULE__0__) {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, { enumerable: true, get: getter });
            }
          };
          __webpack_require__.r = function(exports2) {
            if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
              Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
            }
            Object.defineProperty(exports2, "__esModule", { value: true });
          };
          __webpack_require__.t = function(value, mode) {
            if (mode & 1)
              value = __webpack_require__(value);
            if (mode & 8)
              return value;
            if (mode & 4 && typeof value === "object" && value && value.__esModule)
              return value;
            var ns = /* @__PURE__ */ Object.create(null);
            __webpack_require__.r(ns);
            Object.defineProperty(ns, "default", { enumerable: true, value });
            if (mode & 2 && typeof value != "string")
              for (var key in value)
                __webpack_require__.d(ns, key, (function(key2) {
                  return value[key2];
                }).bind(null, key));
            return ns;
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 9);
        }([
          /* 0 */
          /***/
          function(module2, exports2) {
            module2.exports = __WEBPACK_EXTERNAL_MODULE__0__;
          },
          ,
          /* 2 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "f", function() {
              return isObject;
            });
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return arraytoObject;
            });
            __webpack_require__.d(__webpack_exports__, "c", function() {
              return importAll;
            });
            __webpack_require__.d(__webpack_exports__, "d", function() {
              return inBrowser;
            });
            __webpack_require__.d(__webpack_exports__, "e", function() {
              return isKorean;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return generatorText;
            });
            var toString = Object.prototype.toString;
            var isObject = function isObject2(target) {
              return toString.call(target) === "[object Object]";
            };
            function extend(to, _from) {
              Object.keys(_from).forEach(function(key) {
                to[key] = _from[key];
              });
              return to;
            }
            function arraytoObject(arr) {
              var res = {};
              for (var i = 0; i < arr.length; i++) {
                if (arr[i]) {
                  extend(res, arr[i]);
                }
              }
              return res;
            }
            function importAll(map, r) {
              r.keys().forEach(function(filePath) {
                map[filePath] = r(filePath);
              });
            }
            var inBrowser = typeof window !== "undefined";
            function isKorean(text) {
              var reg = /([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi;
              return reg.test(text);
            }
            function generatorText(_ref) {
              var selected = _ref.selected, InsertGetter = _ref.InsertGetter, _ref$selectedGetter = _ref.selectedGetter, selectedGetter = _ref$selectedGetter === void 0 ? function(selected2) {
                return selected2;
              } : _ref$selectedGetter, _ref$ignoreEmptyLine = _ref.ignoreEmptyLine, ignoreEmptyLine = _ref$ignoreEmptyLine === void 0 ? true : _ref$ignoreEmptyLine;
              var insertContent;
              var newSelected;
              if (selected) {
                newSelected = selectedGetter(selected);
                insertContent = InsertGetter(selected, 1);
                if (selected.indexOf("\n") !== -1) {
                  insertContent = selected.split("\n").map(function(rowText, index) {
                    var isEmptyLine = !rowText;
                    if (ignoreEmptyLine && isEmptyLine)
                      return "";
                    return InsertGetter(rowText, index + 1).replace(selectedGetter(null), "");
                  }).join("\n");
                  newSelected = insertContent;
                }
              } else {
                insertContent = InsertGetter(null, 1);
                newSelected = selectedGetter(selected);
              }
              return {
                insertContent,
                newSelected
              };
            }
          },
          /* 3 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "c", function() {
              return LINE_MARKUP;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return HEADING_MARKUP;
            });
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return ANCHOR_MARKUP;
            });
            var LINE_MARKUP = "data-v-md-line";
            var HEADING_MARKUP = "data-v-md-heading";
            var ANCHOR_MARKUP = "data-v-md-anchor";
          },
          ,
          /* 5 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return getScrollTop;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return scrollTo;
            });
            function getScrollTop(target) {
              var result = 0;
              if (target === window) {
                result = target.pageYOffset;
              } else if (target) {
                result = target.scrollTop;
              }
              return result;
            }
            function scrollTo(target, scrollTop) {
              if (target === window) {
                window.scrollTo(window.pageYOffset, scrollTop);
              } else if (target) {
                target.scrollTop = scrollTop;
              }
            }
          },
          /* 6 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return _extends;
            });
            function _extends() {
              _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              return _extends.apply(this, arguments);
            }
          },
          /* 7 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var esm_extends = __webpack_require__(6);
            var lib = __webpack_require__(11);
            var lib_default = __webpack_require__.n(lib);
            var svgTagWhiteList = {
              svg: [],
              altGlyph: [],
              altGlyphDef: [],
              altGlyphItem: [],
              animate: [],
              animateColor: [],
              animateMotion: [],
              animateTransform: [],
              circle: [],
              clipPath: [],
              "color-profile": [],
              cursor: [],
              "definition-src": [],
              defs: [],
              desc: [],
              ellipse: [],
              feBlend: [],
              feColorMatrix: [],
              feComponentTransfer: [],
              feComposite: [],
              feConvolveMatrix: [],
              feDiffuseLighting: [],
              feDisplacementMap: [],
              feDistantLight: [],
              feFlood: [],
              feFuncA: [],
              feFuncB: [],
              feFuncG: [],
              feFuncR: [],
              feGaussianBlur: [],
              feImage: [],
              feMerge: [],
              feMergeNode: [],
              feMorphology: [],
              feOffset: [],
              fePointLight: [],
              feSpecularLighting: [],
              feSpotLight: [],
              feTile: [],
              feTurbulence: [],
              filter: [],
              font: [],
              foreignObject: [],
              g: [],
              glyph: [],
              glyphRef: [],
              hkern: [],
              image: [],
              line: [],
              linearGradient: [],
              marker: [],
              mask: [],
              metadata: [],
              "missing-glyph": [],
              mpath: [],
              path: [],
              pattern: [],
              polygon: [],
              polyline: [],
              radialGradient: [],
              rect: [],
              set: [],
              stop: [],
              style: [],
              switch: [],
              symbol: [],
              text: [],
              textPath: [],
              title: [],
              tref: [],
              tspan: [],
              use: [],
              view: [],
              vkern: []
            };
            var svgAttrWhiteList = ["width", "height", "x", "y", "rx", "ry", "cx", "cy", "r", "viewbox", "points", "fill", "stroke", "stroke-width", "opacity", "transform", "d", "text-anchor", "font-family", "font-size", "font-weight", "filter", "href", "xlink:href"];
            var katexTagWhiteList = {
              math: [],
              annotation: [],
              semantics: [],
              mtext: [],
              mn: [],
              mo: [],
              mi: [],
              mspace: [],
              mover: [],
              munder: [],
              munderover: [],
              msup: [],
              msub: [],
              msubsup: [],
              mfrac: [],
              mroot: [],
              msqrt: [],
              mtable: [],
              mtr: [],
              mtd: [],
              mlabeledtr: [],
              mrow: [],
              menclose: [],
              mstyle: [],
              mpadded: [],
              mphantom: [],
              mglyph: []
            };
            var katexAttrWhiteList = ["mathcolor", "mathbackground", "mathsize", "mathvariant", "mathfamily", "mathweight", "mathstyle", "mathdisplay"];
            var attrWhiteList = ["style", "align", "class", "id"];
            var prefixAttrWhiteList = ["data-"];
            var commonWhiteList = {
              input: ["type"],
              ol: ["reversed", "start", "type"],
              button: ["type"],
              summary: []
            };
            var options = {
              whiteList: Object(esm_extends[
                "a"
                /* default */
              ])({}, lib_default.a.getDefaultWhiteList(), commonWhiteList, svgTagWhiteList, katexTagWhiteList),
              onIgnoreTagAttr: function onIgnoreTagAttr(tag, name, value) {
                if (svgTagWhiteList[tag] && svgAttrWhiteList.includes(name) || katexTagWhiteList[tag] && katexAttrWhiteList.includes(name) || attrWhiteList.some(function(attr) {
                  return attr === name;
                }) || prefixAttrWhiteList.some(function(prefix) {
                  return name.startsWith(prefix);
                })) {
                  return name + '="' + lib_default.a.escapeAttrValue(value) + '"';
                }
              }
            };
            var xssFilterInstance = new lib_default.a.FilterXSS(options);
            xssFilterInstance.extend = function(extendOptions) {
              var instanceOptions = xssFilterInstance.options;
              Object.keys(extendOptions).forEach(function(optionName) {
                if (optionName === "whiteList") {
                  Object.keys(extendOptions.whiteList).forEach(function(tagName) {
                    var tagAttrWhiteList = extendOptions.whiteList[tagName];
                    var instanceWhiteList = instanceOptions.whiteList;
                    if (instanceWhiteList[tagName]) {
                      instanceWhiteList[tagName] = [].concat(instanceWhiteList[tagName], tagAttrWhiteList);
                    } else {
                      instanceWhiteList[tagName] = tagAttrWhiteList;
                    }
                  });
                } else if (optionName === "onIgnoreTagAttr") {
                  var oldHandler = instanceOptions[optionName];
                  instanceOptions[optionName] = function() {
                    var _extendOptions$option;
                    for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {
                      arg[_key] = arguments[_key];
                    }
                    var oldReturnVal = oldHandler.call.apply(oldHandler, [this].concat(arg));
                    var newReturnVal = (_extendOptions$option = extendOptions[optionName]).call.apply(_extendOptions$option, [this].concat(arg));
                    return oldReturnVal || newReturnVal;
                  };
                } else {
                  instanceOptions[optionName] = extendOptions[optionName];
                }
              });
            };
            var xss = __webpack_exports__["a"] = xssFilterInstance;
          },
          /* 8 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return smooth;
            });
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return smoothScroll;
            });
            var _scroll_top__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
            function smooth(_ref) {
              var currentScrollTop = _ref.currentScrollTop, scrollToTop = _ref.scrollToTop, scrollFn = _ref.scrollFn, _ref$percent = _ref.percent, percent = _ref$percent === void 0 ? 10 : _ref$percent, onScrollEnd = _ref.onScrollEnd;
              var scrollWay = scrollToTop > currentScrollTop ? "down" : "up";
              var step = (scrollToTop - currentScrollTop) * (percent / 100);
              var id;
              var scroll = function scroll2() {
                currentScrollTop += step;
                if (scrollWay === "down" && currentScrollTop >= scrollToTop || scrollWay === "up" && currentScrollTop <= scrollToTop) {
                  scrollFn(scrollToTop);
                  window.cancelAnimationFrame(id);
                  if (onScrollEnd)
                    window.requestAnimationFrame(onScrollEnd);
                } else {
                  scrollFn(currentScrollTop);
                  window.requestAnimationFrame(scroll2);
                }
              };
              window.requestAnimationFrame(scroll);
            }
            function smoothScroll(_ref2) {
              var scrollTarget = _ref2.scrollTarget, scrollToTop = _ref2.scrollToTop, _ref2$percent = _ref2.percent, percent = _ref2$percent === void 0 ? 10 : _ref2$percent, onScrollEnd = _ref2.onScrollEnd;
              var currentScrollTop = Object(_scroll_top__WEBPACK_IMPORTED_MODULE_0__[
                /* getScrollTop */
                "a"
              ])(scrollTarget);
              smooth({
                currentScrollTop,
                scrollToTop,
                scrollFn: function scrollFn(scrollTop) {
                  return Object(_scroll_top__WEBPACK_IMPORTED_MODULE_0__[
                    /* scrollTo */
                    "b"
                  ])(scrollTarget, scrollTop);
                },
                percent,
                onScrollEnd
              });
            }
          },
          /* 9 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_ = __webpack_require__(0);
            function render(_ctx, _cache, $props, $setup, $data, $options) {
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                "div",
                {
                  class: "v-md-editor-preview",
                  style: {
                    tabSize: _ctx.tabSize,
                    "-moz-tab-size": _ctx.tabSize,
                    "-o-tab-size": _ctx.tabSize
                  },
                  onClick: _cache[1] || (_cache[1] = function() {
                    return _ctx.handlePreviewClick.apply(_ctx, arguments);
                  })
                },
                [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                  "div",
                  {
                    class: [_ctx.previewClass],
                    innerHTML: _ctx.html
                  },
                  null,
                  10,
                  ["innerHTML"]
                )],
                4
                /* STYLE */
              );
            }
            var xss = __webpack_require__(7);
            var lang = __webpack_require__(13);
            var v_md_parser_VMdParser = function() {
              function VMdParser() {
                this.lang = new lang[
                  "a"
                  /* default */
                ]();
              }
              var _proto = VMdParser.prototype;
              _proto.defaultMarkdownLoader = function defaultMarkdownLoader(text) {
                return text;
              };
              _proto.use = function use(optionsOrInstall, opt) {
                if (typeof optionsOrInstall === "function") {
                  optionsOrInstall(this, opt);
                } else {
                  optionsOrInstall.install(this, opt);
                }
                return this;
              };
              _proto.theme = function theme(themeConfig) {
                this.themeConfig = themeConfig;
              };
              _proto.extendMarkdown = function extendMarkdown(extender) {
                if (!this.themeConfig) {
                  return console.error("Please use theme before using plugins");
                }
                var markdownParser = this.themeConfig.markdownParser;
                extender(markdownParser);
              };
              _proto.parse = function parse(text) {
                var _markdownParser$rende;
                var markdownParser = this.themeConfig.markdownParser;
                var markdownLoader = (markdownParser == null ? void 0 : (_markdownParser$rende = markdownParser.render) == null ? void 0 : _markdownParser$rende.bind(markdownParser)) || this.defaultMarkdownLoader;
                if (typeof markdownLoader !== "function" || markdownLoader === this.defaultMarkdownLoader) {
                  console.error("Please configure your markdown parser");
                }
                return markdownLoader(text);
              };
              return VMdParser;
            }();
            var preview = __webpack_require__(16);
            var component = {
              name: "v-md-preview",
              mixins: [preview[
                "a"
                /* default */
              ]],
              props: {
                text: {
                  type: String,
                  default: ""
                },
                theme: Object,
                beforeChange: Function
              },
              emits: ["change"],
              data: function data() {
                return {
                  html: ""
                };
              },
              watch: {
                text: function text() {
                  this.handleTextChange();
                },
                langConfig: function langConfig() {
                  this.handleTextChange();
                }
              },
              computed: {
                vMdParser: function vMdParser2() {
                  return this.$options.vMdParser;
                },
                previewClass: function previewClass() {
                  return this.vMdParser.themeConfig.previewClass;
                },
                langConfig: function langConfig() {
                  return this.vMdParser.lang.config;
                }
              },
              created: function created() {
                this.handleTextChange();
              },
              methods: {
                handleTextChange: function handleTextChange() {
                  var _this = this;
                  var next = function next2(text) {
                    _this.html = xss[
                      "a"
                      /* default */
                    ].process(_this.$options.vMdParser.parse(text));
                    _this.$emit("change", text, _this.html);
                  };
                  if (this.beforeChange) {
                    this.beforeChange(this.text, next);
                  } else {
                    next(this.text);
                  }
                }
              }
            };
            var vMdParser = new v_md_parser_VMdParser();
            vMdParser.lang.config = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["reactive"])(vMdParser.lang.config);
            component.vMdParser = new v_md_parser_VMdParser();
            var previewvue_type_script_lang_js = component;
            previewvue_type_script_lang_js.render = render;
            var src_preview = previewvue_type_script_lang_js;
            var font = __webpack_require__(18);
            var version = "2.3.18";
            var preview_install = function install(app) {
              app.component(src_preview.name, src_preview);
            };
            src_preview.version = version;
            src_preview.install = preview_install;
            src_preview.xss = xss[
              "a"
              /* default */
            ];
            src_preview.use = function(optionsOrInstall, opt) {
              if (typeof optionsOrInstall === "function") {
                optionsOrInstall(src_preview, opt);
              } else {
                optionsOrInstall.install(src_preview, opt);
              }
              return src_preview;
            };
            var src_preview_0 = __webpack_exports__["default"] = src_preview;
          },
          ,
          /* 11 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var DEFAULT = __webpack_require__(19);
            var parser = __webpack_require__(22);
            var FilterXSS = __webpack_require__(26);
            function filterXSS(html, options) {
              var xss = new FilterXSS(options);
              return xss.process(html);
            }
            exports2 = module2.exports = filterXSS;
            exports2.filterXSS = filterXSS;
            exports2.FilterXSS = FilterXSS;
            for (var i in DEFAULT)
              exports2[i] = DEFAULT[i];
            for (var i in parser)
              exports2[i] = parser[i];
            if (typeof window !== "undefined") {
              window.filterXSS = module2.exports;
            }
            function isWorkerEnv() {
              return typeof self !== "undefined" && typeof DedicatedWorkerGlobalScope !== "undefined" && self instanceof DedicatedWorkerGlobalScope;
            }
            if (isWorkerEnv()) {
              self.filterXSS = module2.exports;
            }
          },
          ,
          /* 13 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return (
                /* binding */
                lang_Lang
              );
            });
            var util = __webpack_require__(2);
            var deep_assign_hasOwnProperty = Object.prototype.hasOwnProperty;
            function assignKey(to, from, key) {
              var val = from[key];
              if (val === void 0 || val === null) {
                return;
              }
              if (!deep_assign_hasOwnProperty.call(to, key) || !Object(util[
                "f"
                /* isObject */
              ])(val)) {
                to[key] = val;
              } else {
                to[key] = deepAssign(Object(to[key]), from[key]);
              }
            }
            function deepAssign(to, from) {
              Object.keys(from).forEach(function(key) {
                assignKey(to, from, key);
              });
              return to;
            }
            var lang_Lang = function() {
              function Lang(options) {
                if (options === void 0) {
                  options = {};
                }
                this.config = {
                  lang: "zh-CN",
                  langConfig: {
                    "zh-CN": {}
                  }
                };
                this.options = options;
              }
              var _proto = Lang.prototype;
              _proto.use = function use(lang, config) {
                var _this$add;
                this.config.lang = lang;
                this.add((_this$add = {}, _this$add[lang] = config, _this$add));
                if (this.options.afterUse)
                  this.options.afterUse(lang, config);
              };
              _proto.add = function add(config) {
                if (config === void 0) {
                  config = {};
                }
                deepAssign(this.config.langConfig, config);
              };
              return Lang;
            }();
          },
          /* 14 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var DEFAULT = __webpack_require__(20);
            var FilterCSS = __webpack_require__(24);
            function filterCSS(html, options) {
              var xss = new FilterCSS(options);
              return xss.process(html);
            }
            exports2 = module2.exports = filterCSS;
            exports2.FilterCSS = FilterCSS;
            for (var i in DEFAULT)
              exports2[i] = DEFAULT[i];
            if (typeof window !== "undefined") {
              window.filterCSS = module2.exports;
            }
          },
          /* 15 */
          /***/
          function(module2, exports2) {
            module2.exports = {
              indexOf: function(arr, item) {
                var i, j;
                if (Array.prototype.indexOf) {
                  return arr.indexOf(item);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                  if (arr[i] === item) {
                    return i;
                  }
                }
                return -1;
              },
              forEach: function(arr, fn, scope) {
                var i, j;
                if (Array.prototype.forEach) {
                  return arr.forEach(fn, scope);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                  fn.call(scope, arr[i], i, arr);
                }
              },
              trim: function(str) {
                if (String.prototype.trim) {
                  return str.trim();
                }
                return str.replace(/(^\s*)|(\s*$)/g, "");
              },
              spaceIndex: function(str) {
                var reg = /\s|\n|\t/;
                var match = reg.exec(str);
                return match ? match.index : -1;
              }
            };
          },
          /* 16 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _utils_scroll_top__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
            var _utils_smooth_scroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
            var _utils_constants_markup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
            __webpack_exports__["a"] = {
              props: {
                tabSize: {
                  type: Number,
                  default: 2
                },
                scrollContainer: {
                  type: Function,
                  default: function _default() {
                    return window;
                  }
                },
                top: {
                  type: Number,
                  default: 0
                }
              },
              emits: ["image-click"],
              methods: {
                handlePreviewClick: function handlePreviewClick(e) {
                  var target = e.target;
                  if (target.tagName === "IMG") {
                    var src = target.getAttribute("src");
                    if (!src)
                      return;
                    var imageEls = Array.from(this.$el.querySelectorAll("img"));
                    var images = imageEls.map(function(el) {
                      return el.getAttribute("src");
                    }).filter(function(src2) {
                      return src2;
                    });
                    var imagePreviewInitIndex = imageEls.indexOf(target);
                    this.$emit("image-click", images, imagePreviewInitIndex);
                    return;
                  }
                  var scrollToTargetId = target.getAttribute(_utils_constants_markup__WEBPACK_IMPORTED_MODULE_2__[
                    /* ANCHOR_MARKUP */
                    "a"
                  ]);
                  var scrollToTarget = this.$el.querySelector("[" + _utils_constants_markup__WEBPACK_IMPORTED_MODULE_2__[
                    /* HEADING_MARKUP */
                    "b"
                  ] + '="' + scrollToTargetId + '"]');
                  if (scrollToTarget) {
                    this.scrollToTarget({
                      target: scrollToTarget
                    });
                  }
                },
                getOffsetTop: function getOffsetTop(target, container) {
                  var rect = target.getBoundingClientRect();
                  if (container === window || container === document.documentElement) {
                    return rect.top;
                  }
                  return rect.top - container.getBoundingClientRect().top;
                },
                scrollToTarget: function scrollToTarget(_ref) {
                  var target = _ref.target, _ref$scrollContainer = _ref.scrollContainer, scrollContainer = _ref$scrollContainer === void 0 ? this.scrollContainer() : _ref$scrollContainer, _ref$top = _ref.top, top = _ref$top === void 0 ? this.top : _ref$top, onScrollEnd = _ref.onScrollEnd;
                  var offsetTop = this.getOffsetTop(target, scrollContainer);
                  var scrollTop = Object(_utils_scroll_top__WEBPACK_IMPORTED_MODULE_0__[
                    /* getScrollTop */
                    "a"
                  ])(scrollContainer) + offsetTop - top;
                  Object(_utils_smooth_scroll__WEBPACK_IMPORTED_MODULE_1__[
                    /* default */
                    "a"
                  ])({
                    scrollTarget: scrollContainer,
                    scrollToTop: scrollTop,
                    onScrollEnd
                  });
                },
                scrollToLine: function scrollToLine(_ref2) {
                  var lineIndex = _ref2.lineIndex, onScrollEnd = _ref2.onScrollEnd;
                  if (lineIndex) {
                    var target = this.$el.querySelector("[" + _utils_constants_markup__WEBPACK_IMPORTED_MODULE_2__[
                      /* LINE_MARKUP */
                      "c"
                    ] + '="' + lineIndex + '"]');
                    if (target)
                      this.scrollToTarget({
                        target,
                        onScrollEnd
                      });
                  }
                }
              }
            };
          },
          ,
          /* 18 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 19 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var FilterCSS = __webpack_require__(14).FilterCSS;
            var getDefaultCSSWhiteList = __webpack_require__(14).getDefaultWhiteList;
            var _ = __webpack_require__(15);
            function getDefaultWhiteList() {
              return {
                a: ["target", "href", "title"],
                abbr: ["title"],
                address: [],
                area: ["shape", "coords", "href", "alt"],
                article: [],
                aside: [],
                audio: [
                  "autoplay",
                  "controls",
                  "crossorigin",
                  "loop",
                  "muted",
                  "preload",
                  "src"
                ],
                b: [],
                bdi: ["dir"],
                bdo: ["dir"],
                big: [],
                blockquote: ["cite"],
                br: [],
                caption: [],
                center: [],
                cite: [],
                code: [],
                col: ["align", "valign", "span", "width"],
                colgroup: ["align", "valign", "span", "width"],
                dd: [],
                del: ["datetime"],
                details: ["open"],
                div: [],
                dl: [],
                dt: [],
                em: [],
                figcaption: [],
                figure: [],
                font: ["color", "size", "face"],
                footer: [],
                h1: [],
                h2: [],
                h3: [],
                h4: [],
                h5: [],
                h6: [],
                header: [],
                hr: [],
                i: [],
                img: ["src", "alt", "title", "width", "height"],
                ins: ["datetime"],
                li: [],
                mark: [],
                nav: [],
                ol: [],
                p: [],
                pre: [],
                s: [],
                section: [],
                small: [],
                span: [],
                sub: [],
                summary: [],
                sup: [],
                strong: [],
                strike: [],
                table: ["width", "border", "align", "valign"],
                tbody: ["align", "valign"],
                td: ["width", "rowspan", "colspan", "align", "valign"],
                tfoot: ["align", "valign"],
                th: ["width", "rowspan", "colspan", "align", "valign"],
                thead: ["align", "valign"],
                tr: ["rowspan", "align", "valign"],
                tt: [],
                u: [],
                ul: [],
                video: [
                  "autoplay",
                  "controls",
                  "crossorigin",
                  "loop",
                  "muted",
                  "playsinline",
                  "poster",
                  "preload",
                  "src",
                  "height",
                  "width"
                ]
              };
            }
            var defaultCSSFilter = new FilterCSS();
            function onTag(tag, html, options) {
            }
            function onIgnoreTag(tag, html, options) {
            }
            function onTagAttr(tag, name, value) {
            }
            function onIgnoreTagAttr(tag, name, value) {
            }
            function escapeHtml(html) {
              return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
            }
            function safeAttrValue(tag, name, value, cssFilter) {
              value = friendlyAttrValue(value);
              if (name === "href" || name === "src") {
                value = _.trim(value);
                if (value === "#")
                  return "#";
                if (!(value.substr(0, 7) === "http://" || value.substr(0, 8) === "https://" || value.substr(0, 7) === "mailto:" || value.substr(0, 4) === "tel:" || value.substr(0, 11) === "data:image/" || value.substr(0, 6) === "ftp://" || value.substr(0, 2) === "./" || value.substr(0, 3) === "../" || value[0] === "#" || value[0] === "/")) {
                  return "";
                }
              } else if (name === "background") {
                REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
                if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
                  return "";
                }
              } else if (name === "style") {
                REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
                if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
                  return "";
                }
                REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
                if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
                  REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
                  if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
                    return "";
                  }
                }
                if (cssFilter !== false) {
                  cssFilter = cssFilter || defaultCSSFilter;
                  value = cssFilter.process(value);
                }
              }
              value = escapeAttrValue(value);
              return value;
            }
            var REGEXP_LT = /</g;
            var REGEXP_GT = />/g;
            var REGEXP_QUOTE = /"/g;
            var REGEXP_QUOTE_2 = /&quot;/g;
            var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
            var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
            var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
            var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\/\*|\*\//gm;
            var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a)\:/gi;
            var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:/gi;
            var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:\s*image\//gi;
            var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
            var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;
            function escapeQuote(str) {
              return str.replace(REGEXP_QUOTE, "&quot;");
            }
            function unescapeQuote(str) {
              return str.replace(REGEXP_QUOTE_2, '"');
            }
            function escapeHtmlEntities(str) {
              return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str2, code) {
                return code[0] === "x" || code[0] === "X" ? String.fromCharCode(parseInt(code.substr(1), 16)) : String.fromCharCode(parseInt(code, 10));
              });
            }
            function escapeDangerHtml5Entities(str) {
              return str.replace(REGEXP_ATTR_VALUE_COLON, ":").replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
            }
            function clearNonPrintableCharacter(str) {
              var str2 = "";
              for (var i = 0, len = str.length; i < len; i++) {
                str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
              }
              return _.trim(str2);
            }
            function friendlyAttrValue(str) {
              str = unescapeQuote(str);
              str = escapeHtmlEntities(str);
              str = escapeDangerHtml5Entities(str);
              str = clearNonPrintableCharacter(str);
              return str;
            }
            function escapeAttrValue(str) {
              str = escapeQuote(str);
              str = escapeHtml(str);
              return str;
            }
            function onIgnoreTagStripAll() {
              return "";
            }
            function StripTagBody(tags, next) {
              if (typeof next !== "function") {
                next = function() {
                };
              }
              var isRemoveAllTag = !Array.isArray(tags);
              function isRemoveTag(tag) {
                if (isRemoveAllTag)
                  return true;
                return _.indexOf(tags, tag) !== -1;
              }
              var removeList = [];
              var posStart = false;
              return {
                onIgnoreTag: function(tag, html, options) {
                  if (isRemoveTag(tag)) {
                    if (options.isClosing) {
                      var ret = "[/removed]";
                      var end = options.position + ret.length;
                      removeList.push([
                        posStart !== false ? posStart : options.position,
                        end
                      ]);
                      posStart = false;
                      return ret;
                    } else {
                      if (!posStart) {
                        posStart = options.position;
                      }
                      return "[removed]";
                    }
                  } else {
                    return next(tag, html, options);
                  }
                },
                remove: function(html) {
                  var rethtml = "";
                  var lastPos = 0;
                  _.forEach(removeList, function(pos) {
                    rethtml += html.slice(lastPos, pos[0]);
                    lastPos = pos[1];
                  });
                  rethtml += html.slice(lastPos);
                  return rethtml;
                }
              };
            }
            function stripCommentTag(html) {
              return html.replace(STRIP_COMMENT_TAG_REGEXP, "");
            }
            var STRIP_COMMENT_TAG_REGEXP = /<!--[\s\S]*?-->/g;
            function stripBlankChar(html) {
              var chars = html.split("");
              chars = chars.filter(function(char) {
                var c = char.charCodeAt(0);
                if (c === 127)
                  return false;
                if (c <= 31) {
                  if (c === 10 || c === 13)
                    return true;
                  return false;
                }
                return true;
              });
              return chars.join("");
            }
            exports2.whiteList = getDefaultWhiteList();
            exports2.getDefaultWhiteList = getDefaultWhiteList;
            exports2.onTag = onTag;
            exports2.onIgnoreTag = onIgnoreTag;
            exports2.onTagAttr = onTagAttr;
            exports2.onIgnoreTagAttr = onIgnoreTagAttr;
            exports2.safeAttrValue = safeAttrValue;
            exports2.escapeHtml = escapeHtml;
            exports2.escapeQuote = escapeQuote;
            exports2.unescapeQuote = unescapeQuote;
            exports2.escapeHtmlEntities = escapeHtmlEntities;
            exports2.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
            exports2.clearNonPrintableCharacter = clearNonPrintableCharacter;
            exports2.friendlyAttrValue = friendlyAttrValue;
            exports2.escapeAttrValue = escapeAttrValue;
            exports2.onIgnoreTagStripAll = onIgnoreTagStripAll;
            exports2.StripTagBody = StripTagBody;
            exports2.stripCommentTag = stripCommentTag;
            exports2.stripBlankChar = stripBlankChar;
            exports2.cssFilter = defaultCSSFilter;
            exports2.getDefaultCSSWhiteList = getDefaultCSSWhiteList;
          },
          /* 20 */
          /***/
          function(module2, exports2) {
            function getDefaultWhiteList() {
              var whiteList = {};
              whiteList["align-content"] = false;
              whiteList["align-items"] = false;
              whiteList["align-self"] = false;
              whiteList["alignment-adjust"] = false;
              whiteList["alignment-baseline"] = false;
              whiteList["all"] = false;
              whiteList["anchor-point"] = false;
              whiteList["animation"] = false;
              whiteList["animation-delay"] = false;
              whiteList["animation-direction"] = false;
              whiteList["animation-duration"] = false;
              whiteList["animation-fill-mode"] = false;
              whiteList["animation-iteration-count"] = false;
              whiteList["animation-name"] = false;
              whiteList["animation-play-state"] = false;
              whiteList["animation-timing-function"] = false;
              whiteList["azimuth"] = false;
              whiteList["backface-visibility"] = false;
              whiteList["background"] = true;
              whiteList["background-attachment"] = true;
              whiteList["background-clip"] = true;
              whiteList["background-color"] = true;
              whiteList["background-image"] = true;
              whiteList["background-origin"] = true;
              whiteList["background-position"] = true;
              whiteList["background-repeat"] = true;
              whiteList["background-size"] = true;
              whiteList["baseline-shift"] = false;
              whiteList["binding"] = false;
              whiteList["bleed"] = false;
              whiteList["bookmark-label"] = false;
              whiteList["bookmark-level"] = false;
              whiteList["bookmark-state"] = false;
              whiteList["border"] = true;
              whiteList["border-bottom"] = true;
              whiteList["border-bottom-color"] = true;
              whiteList["border-bottom-left-radius"] = true;
              whiteList["border-bottom-right-radius"] = true;
              whiteList["border-bottom-style"] = true;
              whiteList["border-bottom-width"] = true;
              whiteList["border-collapse"] = true;
              whiteList["border-color"] = true;
              whiteList["border-image"] = true;
              whiteList["border-image-outset"] = true;
              whiteList["border-image-repeat"] = true;
              whiteList["border-image-slice"] = true;
              whiteList["border-image-source"] = true;
              whiteList["border-image-width"] = true;
              whiteList["border-left"] = true;
              whiteList["border-left-color"] = true;
              whiteList["border-left-style"] = true;
              whiteList["border-left-width"] = true;
              whiteList["border-radius"] = true;
              whiteList["border-right"] = true;
              whiteList["border-right-color"] = true;
              whiteList["border-right-style"] = true;
              whiteList["border-right-width"] = true;
              whiteList["border-spacing"] = true;
              whiteList["border-style"] = true;
              whiteList["border-top"] = true;
              whiteList["border-top-color"] = true;
              whiteList["border-top-left-radius"] = true;
              whiteList["border-top-right-radius"] = true;
              whiteList["border-top-style"] = true;
              whiteList["border-top-width"] = true;
              whiteList["border-width"] = true;
              whiteList["bottom"] = false;
              whiteList["box-decoration-break"] = true;
              whiteList["box-shadow"] = true;
              whiteList["box-sizing"] = true;
              whiteList["box-snap"] = true;
              whiteList["box-suppress"] = true;
              whiteList["break-after"] = true;
              whiteList["break-before"] = true;
              whiteList["break-inside"] = true;
              whiteList["caption-side"] = false;
              whiteList["chains"] = false;
              whiteList["clear"] = true;
              whiteList["clip"] = false;
              whiteList["clip-path"] = false;
              whiteList["clip-rule"] = false;
              whiteList["color"] = true;
              whiteList["color-interpolation-filters"] = true;
              whiteList["column-count"] = false;
              whiteList["column-fill"] = false;
              whiteList["column-gap"] = false;
              whiteList["column-rule"] = false;
              whiteList["column-rule-color"] = false;
              whiteList["column-rule-style"] = false;
              whiteList["column-rule-width"] = false;
              whiteList["column-span"] = false;
              whiteList["column-width"] = false;
              whiteList["columns"] = false;
              whiteList["contain"] = false;
              whiteList["content"] = false;
              whiteList["counter-increment"] = false;
              whiteList["counter-reset"] = false;
              whiteList["counter-set"] = false;
              whiteList["crop"] = false;
              whiteList["cue"] = false;
              whiteList["cue-after"] = false;
              whiteList["cue-before"] = false;
              whiteList["cursor"] = false;
              whiteList["direction"] = false;
              whiteList["display"] = true;
              whiteList["display-inside"] = true;
              whiteList["display-list"] = true;
              whiteList["display-outside"] = true;
              whiteList["dominant-baseline"] = false;
              whiteList["elevation"] = false;
              whiteList["empty-cells"] = false;
              whiteList["filter"] = false;
              whiteList["flex"] = false;
              whiteList["flex-basis"] = false;
              whiteList["flex-direction"] = false;
              whiteList["flex-flow"] = false;
              whiteList["flex-grow"] = false;
              whiteList["flex-shrink"] = false;
              whiteList["flex-wrap"] = false;
              whiteList["float"] = false;
              whiteList["float-offset"] = false;
              whiteList["flood-color"] = false;
              whiteList["flood-opacity"] = false;
              whiteList["flow-from"] = false;
              whiteList["flow-into"] = false;
              whiteList["font"] = true;
              whiteList["font-family"] = true;
              whiteList["font-feature-settings"] = true;
              whiteList["font-kerning"] = true;
              whiteList["font-language-override"] = true;
              whiteList["font-size"] = true;
              whiteList["font-size-adjust"] = true;
              whiteList["font-stretch"] = true;
              whiteList["font-style"] = true;
              whiteList["font-synthesis"] = true;
              whiteList["font-variant"] = true;
              whiteList["font-variant-alternates"] = true;
              whiteList["font-variant-caps"] = true;
              whiteList["font-variant-east-asian"] = true;
              whiteList["font-variant-ligatures"] = true;
              whiteList["font-variant-numeric"] = true;
              whiteList["font-variant-position"] = true;
              whiteList["font-weight"] = true;
              whiteList["grid"] = false;
              whiteList["grid-area"] = false;
              whiteList["grid-auto-columns"] = false;
              whiteList["grid-auto-flow"] = false;
              whiteList["grid-auto-rows"] = false;
              whiteList["grid-column"] = false;
              whiteList["grid-column-end"] = false;
              whiteList["grid-column-start"] = false;
              whiteList["grid-row"] = false;
              whiteList["grid-row-end"] = false;
              whiteList["grid-row-start"] = false;
              whiteList["grid-template"] = false;
              whiteList["grid-template-areas"] = false;
              whiteList["grid-template-columns"] = false;
              whiteList["grid-template-rows"] = false;
              whiteList["hanging-punctuation"] = false;
              whiteList["height"] = true;
              whiteList["hyphens"] = false;
              whiteList["icon"] = false;
              whiteList["image-orientation"] = false;
              whiteList["image-resolution"] = false;
              whiteList["ime-mode"] = false;
              whiteList["initial-letters"] = false;
              whiteList["inline-box-align"] = false;
              whiteList["justify-content"] = false;
              whiteList["justify-items"] = false;
              whiteList["justify-self"] = false;
              whiteList["left"] = false;
              whiteList["letter-spacing"] = true;
              whiteList["lighting-color"] = true;
              whiteList["line-box-contain"] = false;
              whiteList["line-break"] = false;
              whiteList["line-grid"] = false;
              whiteList["line-height"] = false;
              whiteList["line-snap"] = false;
              whiteList["line-stacking"] = false;
              whiteList["line-stacking-ruby"] = false;
              whiteList["line-stacking-shift"] = false;
              whiteList["line-stacking-strategy"] = false;
              whiteList["list-style"] = true;
              whiteList["list-style-image"] = true;
              whiteList["list-style-position"] = true;
              whiteList["list-style-type"] = true;
              whiteList["margin"] = true;
              whiteList["margin-bottom"] = true;
              whiteList["margin-left"] = true;
              whiteList["margin-right"] = true;
              whiteList["margin-top"] = true;
              whiteList["marker-offset"] = false;
              whiteList["marker-side"] = false;
              whiteList["marks"] = false;
              whiteList["mask"] = false;
              whiteList["mask-box"] = false;
              whiteList["mask-box-outset"] = false;
              whiteList["mask-box-repeat"] = false;
              whiteList["mask-box-slice"] = false;
              whiteList["mask-box-source"] = false;
              whiteList["mask-box-width"] = false;
              whiteList["mask-clip"] = false;
              whiteList["mask-image"] = false;
              whiteList["mask-origin"] = false;
              whiteList["mask-position"] = false;
              whiteList["mask-repeat"] = false;
              whiteList["mask-size"] = false;
              whiteList["mask-source-type"] = false;
              whiteList["mask-type"] = false;
              whiteList["max-height"] = true;
              whiteList["max-lines"] = false;
              whiteList["max-width"] = true;
              whiteList["min-height"] = true;
              whiteList["min-width"] = true;
              whiteList["move-to"] = false;
              whiteList["nav-down"] = false;
              whiteList["nav-index"] = false;
              whiteList["nav-left"] = false;
              whiteList["nav-right"] = false;
              whiteList["nav-up"] = false;
              whiteList["object-fit"] = false;
              whiteList["object-position"] = false;
              whiteList["opacity"] = false;
              whiteList["order"] = false;
              whiteList["orphans"] = false;
              whiteList["outline"] = false;
              whiteList["outline-color"] = false;
              whiteList["outline-offset"] = false;
              whiteList["outline-style"] = false;
              whiteList["outline-width"] = false;
              whiteList["overflow"] = false;
              whiteList["overflow-wrap"] = false;
              whiteList["overflow-x"] = false;
              whiteList["overflow-y"] = false;
              whiteList["padding"] = true;
              whiteList["padding-bottom"] = true;
              whiteList["padding-left"] = true;
              whiteList["padding-right"] = true;
              whiteList["padding-top"] = true;
              whiteList["page"] = false;
              whiteList["page-break-after"] = false;
              whiteList["page-break-before"] = false;
              whiteList["page-break-inside"] = false;
              whiteList["page-policy"] = false;
              whiteList["pause"] = false;
              whiteList["pause-after"] = false;
              whiteList["pause-before"] = false;
              whiteList["perspective"] = false;
              whiteList["perspective-origin"] = false;
              whiteList["pitch"] = false;
              whiteList["pitch-range"] = false;
              whiteList["play-during"] = false;
              whiteList["position"] = false;
              whiteList["presentation-level"] = false;
              whiteList["quotes"] = false;
              whiteList["region-fragment"] = false;
              whiteList["resize"] = false;
              whiteList["rest"] = false;
              whiteList["rest-after"] = false;
              whiteList["rest-before"] = false;
              whiteList["richness"] = false;
              whiteList["right"] = false;
              whiteList["rotation"] = false;
              whiteList["rotation-point"] = false;
              whiteList["ruby-align"] = false;
              whiteList["ruby-merge"] = false;
              whiteList["ruby-position"] = false;
              whiteList["shape-image-threshold"] = false;
              whiteList["shape-outside"] = false;
              whiteList["shape-margin"] = false;
              whiteList["size"] = false;
              whiteList["speak"] = false;
              whiteList["speak-as"] = false;
              whiteList["speak-header"] = false;
              whiteList["speak-numeral"] = false;
              whiteList["speak-punctuation"] = false;
              whiteList["speech-rate"] = false;
              whiteList["stress"] = false;
              whiteList["string-set"] = false;
              whiteList["tab-size"] = false;
              whiteList["table-layout"] = false;
              whiteList["text-align"] = true;
              whiteList["text-align-last"] = true;
              whiteList["text-combine-upright"] = true;
              whiteList["text-decoration"] = true;
              whiteList["text-decoration-color"] = true;
              whiteList["text-decoration-line"] = true;
              whiteList["text-decoration-skip"] = true;
              whiteList["text-decoration-style"] = true;
              whiteList["text-emphasis"] = true;
              whiteList["text-emphasis-color"] = true;
              whiteList["text-emphasis-position"] = true;
              whiteList["text-emphasis-style"] = true;
              whiteList["text-height"] = true;
              whiteList["text-indent"] = true;
              whiteList["text-justify"] = true;
              whiteList["text-orientation"] = true;
              whiteList["text-overflow"] = true;
              whiteList["text-shadow"] = true;
              whiteList["text-space-collapse"] = true;
              whiteList["text-transform"] = true;
              whiteList["text-underline-position"] = true;
              whiteList["text-wrap"] = true;
              whiteList["top"] = false;
              whiteList["transform"] = false;
              whiteList["transform-origin"] = false;
              whiteList["transform-style"] = false;
              whiteList["transition"] = false;
              whiteList["transition-delay"] = false;
              whiteList["transition-duration"] = false;
              whiteList["transition-property"] = false;
              whiteList["transition-timing-function"] = false;
              whiteList["unicode-bidi"] = false;
              whiteList["vertical-align"] = false;
              whiteList["visibility"] = false;
              whiteList["voice-balance"] = false;
              whiteList["voice-duration"] = false;
              whiteList["voice-family"] = false;
              whiteList["voice-pitch"] = false;
              whiteList["voice-range"] = false;
              whiteList["voice-rate"] = false;
              whiteList["voice-stress"] = false;
              whiteList["voice-volume"] = false;
              whiteList["volume"] = false;
              whiteList["white-space"] = false;
              whiteList["widows"] = false;
              whiteList["width"] = true;
              whiteList["will-change"] = false;
              whiteList["word-break"] = true;
              whiteList["word-spacing"] = true;
              whiteList["word-wrap"] = true;
              whiteList["wrap-flow"] = false;
              whiteList["wrap-through"] = false;
              whiteList["writing-mode"] = false;
              whiteList["z-index"] = false;
              return whiteList;
            }
            function onAttr(name, value, options) {
            }
            function onIgnoreAttr(name, value, options) {
            }
            var REGEXP_URL_JAVASCRIPT = /javascript\s*\:/img;
            function safeAttrValue(name, value) {
              if (REGEXP_URL_JAVASCRIPT.test(value))
                return "";
              return value;
            }
            exports2.whiteList = getDefaultWhiteList();
            exports2.getDefaultWhiteList = getDefaultWhiteList;
            exports2.onAttr = onAttr;
            exports2.onIgnoreAttr = onIgnoreAttr;
            exports2.safeAttrValue = safeAttrValue;
          },
          /* 21 */
          /***/
          function(module2, exports2) {
            module2.exports = {
              indexOf: function(arr, item) {
                var i, j;
                if (Array.prototype.indexOf) {
                  return arr.indexOf(item);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                  if (arr[i] === item) {
                    return i;
                  }
                }
                return -1;
              },
              forEach: function(arr, fn, scope) {
                var i, j;
                if (Array.prototype.forEach) {
                  return arr.forEach(fn, scope);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                  fn.call(scope, arr[i], i, arr);
                }
              },
              trim: function(str) {
                if (String.prototype.trim) {
                  return str.trim();
                }
                return str.replace(/(^\s*)|(\s*$)/g, "");
              },
              trimRight: function(str) {
                if (String.prototype.trimRight) {
                  return str.trimRight();
                }
                return str.replace(/(\s*$)/g, "");
              }
            };
          },
          /* 22 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var _ = __webpack_require__(15);
            function getTagName(html) {
              var i = _.spaceIndex(html);
              if (i === -1) {
                var tagName = html.slice(1, -1);
              } else {
                var tagName = html.slice(1, i + 1);
              }
              tagName = _.trim(tagName).toLowerCase();
              if (tagName.slice(0, 1) === "/")
                tagName = tagName.slice(1);
              if (tagName.slice(-1) === "/")
                tagName = tagName.slice(0, -1);
              return tagName;
            }
            function isClosing(html) {
              return html.slice(0, 2) === "</";
            }
            function parseTag(html, onTag, escapeHtml) {
              "use strict";
              var rethtml = "";
              var lastPos = 0;
              var tagStart = false;
              var quoteStart = false;
              var currentPos = 0;
              var len = html.length;
              var currentTagName = "";
              var currentHtml = "";
              chariterator:
                for (currentPos = 0; currentPos < len; currentPos++) {
                  var c = html.charAt(currentPos);
                  if (tagStart === false) {
                    if (c === "<") {
                      tagStart = currentPos;
                      continue;
                    }
                  } else {
                    if (quoteStart === false) {
                      if (c === "<") {
                        rethtml += escapeHtml(html.slice(lastPos, currentPos));
                        tagStart = currentPos;
                        lastPos = currentPos;
                        continue;
                      }
                      if (c === ">") {
                        rethtml += escapeHtml(html.slice(lastPos, tagStart));
                        currentHtml = html.slice(tagStart, currentPos + 1);
                        currentTagName = getTagName(currentHtml);
                        rethtml += onTag(
                          tagStart,
                          rethtml.length,
                          currentTagName,
                          currentHtml,
                          isClosing(currentHtml)
                        );
                        lastPos = currentPos + 1;
                        tagStart = false;
                        continue;
                      }
                      if (c === '"' || c === "'") {
                        var i = 1;
                        var ic = html.charAt(currentPos - i);
                        while (ic.trim() === "" || ic === "=") {
                          if (ic === "=") {
                            quoteStart = c;
                            continue chariterator;
                          }
                          ic = html.charAt(currentPos - ++i);
                        }
                      }
                    } else {
                      if (c === quoteStart) {
                        quoteStart = false;
                        continue;
                      }
                    }
                  }
                }
              if (lastPos < html.length) {
                rethtml += escapeHtml(html.substr(lastPos));
              }
              return rethtml;
            }
            var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9_:\.\-]/gim;
            function parseAttr(html, onAttr) {
              "use strict";
              var lastPos = 0;
              var retAttrs = [];
              var tmpName = false;
              var len = html.length;
              function addAttr(name, value) {
                name = _.trim(name);
                name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
                if (name.length < 1)
                  return;
                var ret = onAttr(name, value || "");
                if (ret)
                  retAttrs.push(ret);
              }
              for (var i = 0; i < len; i++) {
                var c = html.charAt(i);
                var v, j;
                if (tmpName === false && c === "=") {
                  tmpName = html.slice(lastPos, i);
                  lastPos = i + 1;
                  continue;
                }
                if (tmpName !== false) {
                  if (i === lastPos && (c === '"' || c === "'") && html.charAt(i - 1) === "=") {
                    j = html.indexOf(c, i + 1);
                    if (j === -1) {
                      break;
                    } else {
                      v = _.trim(html.slice(lastPos + 1, j));
                      addAttr(tmpName, v);
                      tmpName = false;
                      i = j;
                      lastPos = i + 1;
                      continue;
                    }
                  }
                }
                if (/\s|\n|\t/.test(c)) {
                  html = html.replace(/\s|\n|\t/g, " ");
                  if (tmpName === false) {
                    j = findNextEqual(html, i);
                    if (j === -1) {
                      v = _.trim(html.slice(lastPos, i));
                      addAttr(v);
                      tmpName = false;
                      lastPos = i + 1;
                      continue;
                    } else {
                      i = j - 1;
                      continue;
                    }
                  } else {
                    j = findBeforeEqual(html, i - 1);
                    if (j === -1) {
                      v = _.trim(html.slice(lastPos, i));
                      v = stripQuoteWrap(v);
                      addAttr(tmpName, v);
                      tmpName = false;
                      lastPos = i + 1;
                      continue;
                    } else {
                      continue;
                    }
                  }
                }
              }
              if (lastPos < html.length) {
                if (tmpName === false) {
                  addAttr(html.slice(lastPos));
                } else {
                  addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));
                }
              }
              return _.trim(retAttrs.join(" "));
            }
            function findNextEqual(str, i) {
              for (; i < str.length; i++) {
                var c = str[i];
                if (c === " ")
                  continue;
                if (c === "=")
                  return i;
                return -1;
              }
            }
            function findBeforeEqual(str, i) {
              for (; i > 0; i--) {
                var c = str[i];
                if (c === " ")
                  continue;
                if (c === "=")
                  return i;
                return -1;
              }
            }
            function isQuoteWrapString(text) {
              if (text[0] === '"' && text[text.length - 1] === '"' || text[0] === "'" && text[text.length - 1] === "'") {
                return true;
              } else {
                return false;
              }
            }
            function stripQuoteWrap(text) {
              if (isQuoteWrapString(text)) {
                return text.substr(1, text.length - 2);
              } else {
                return text;
              }
            }
            exports2.parseTag = parseTag;
            exports2.parseAttr = parseAttr;
          },
          ,
          /* 24 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var DEFAULT = __webpack_require__(20);
            var parseStyle = __webpack_require__(25);
            var _ = __webpack_require__(21);
            function isNull(obj) {
              return obj === void 0 || obj === null;
            }
            function shallowCopyObject(obj) {
              var ret = {};
              for (var i in obj) {
                ret[i] = obj[i];
              }
              return ret;
            }
            function FilterCSS(options) {
              options = shallowCopyObject(options || {});
              options.whiteList = options.whiteList || DEFAULT.whiteList;
              options.onAttr = options.onAttr || DEFAULT.onAttr;
              options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT.onIgnoreAttr;
              options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
              this.options = options;
            }
            FilterCSS.prototype.process = function(css) {
              css = css || "";
              css = css.toString();
              if (!css)
                return "";
              var me = this;
              var options = me.options;
              var whiteList = options.whiteList;
              var onAttr = options.onAttr;
              var onIgnoreAttr = options.onIgnoreAttr;
              var safeAttrValue = options.safeAttrValue;
              var retCSS = parseStyle(css, function(sourcePosition, position, name, value, source) {
                var check = whiteList[name];
                var isWhite = false;
                if (check === true)
                  isWhite = check;
                else if (typeof check === "function")
                  isWhite = check(value);
                else if (check instanceof RegExp)
                  isWhite = check.test(value);
                if (isWhite !== true)
                  isWhite = false;
                value = safeAttrValue(name, value);
                if (!value)
                  return;
                var opts = {
                  position,
                  sourcePosition,
                  source,
                  isWhite
                };
                if (isWhite) {
                  var ret = onAttr(name, value, opts);
                  if (isNull(ret)) {
                    return name + ":" + value;
                  } else {
                    return ret;
                  }
                } else {
                  var ret = onIgnoreAttr(name, value, opts);
                  if (!isNull(ret)) {
                    return ret;
                  }
                }
              });
              return retCSS;
            };
            module2.exports = FilterCSS;
          },
          /* 25 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var _ = __webpack_require__(21);
            function parseStyle(css, onAttr) {
              css = _.trimRight(css);
              if (css[css.length - 1] !== ";")
                css += ";";
              var cssLength = css.length;
              var isParenthesisOpen = false;
              var lastPos = 0;
              var i = 0;
              var retCSS = "";
              function addNewAttr() {
                if (!isParenthesisOpen) {
                  var source = _.trim(css.slice(lastPos, i));
                  var j2 = source.indexOf(":");
                  if (j2 !== -1) {
                    var name = _.trim(source.slice(0, j2));
                    var value = _.trim(source.slice(j2 + 1));
                    if (name) {
                      var ret = onAttr(lastPos, retCSS.length, name, value, source);
                      if (ret)
                        retCSS += ret + "; ";
                    }
                  }
                }
                lastPos = i + 1;
              }
              for (; i < cssLength; i++) {
                var c = css[i];
                if (c === "/" && css[i + 1] === "*") {
                  var j = css.indexOf("*/", i + 2);
                  if (j === -1)
                    break;
                  i = j + 1;
                  lastPos = i + 1;
                  isParenthesisOpen = false;
                } else if (c === "(") {
                  isParenthesisOpen = true;
                } else if (c === ")") {
                  isParenthesisOpen = false;
                } else if (c === ";") {
                  if (isParenthesisOpen) {
                  } else {
                    addNewAttr();
                  }
                } else if (c === "\n") {
                  addNewAttr();
                }
              }
              return _.trim(retCSS);
            }
            module2.exports = parseStyle;
          },
          /* 26 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var FilterCSS = __webpack_require__(14).FilterCSS;
            var DEFAULT = __webpack_require__(19);
            var parser = __webpack_require__(22);
            var parseTag = parser.parseTag;
            var parseAttr = parser.parseAttr;
            var _ = __webpack_require__(15);
            function isNull(obj) {
              return obj === void 0 || obj === null;
            }
            function getAttrs(html) {
              var i = _.spaceIndex(html);
              if (i === -1) {
                return {
                  html: "",
                  closing: html[html.length - 2] === "/"
                };
              }
              html = _.trim(html.slice(i + 1, -1));
              var isClosing = html[html.length - 1] === "/";
              if (isClosing)
                html = _.trim(html.slice(0, -1));
              return {
                html,
                closing: isClosing
              };
            }
            function shallowCopyObject(obj) {
              var ret = {};
              for (var i in obj) {
                ret[i] = obj[i];
              }
              return ret;
            }
            function FilterXSS(options) {
              options = shallowCopyObject(options || {});
              if (options.stripIgnoreTag) {
                if (options.onIgnoreTag) {
                  console.error(
                    'Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time'
                  );
                }
                options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
              }
              options.whiteList = options.whiteList || DEFAULT.whiteList;
              options.onTag = options.onTag || DEFAULT.onTag;
              options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
              options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
              options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
              options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
              options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
              this.options = options;
              if (options.css === false) {
                this.cssFilter = false;
              } else {
                options.css = options.css || {};
                this.cssFilter = new FilterCSS(options.css);
              }
            }
            FilterXSS.prototype.process = function(html) {
              html = html || "";
              html = html.toString();
              if (!html)
                return "";
              var me = this;
              var options = me.options;
              var whiteList = options.whiteList;
              var onTag = options.onTag;
              var onIgnoreTag = options.onIgnoreTag;
              var onTagAttr = options.onTagAttr;
              var onIgnoreTagAttr = options.onIgnoreTagAttr;
              var safeAttrValue = options.safeAttrValue;
              var escapeHtml = options.escapeHtml;
              var cssFilter = me.cssFilter;
              if (options.stripBlankChar) {
                html = DEFAULT.stripBlankChar(html);
              }
              if (!options.allowCommentTag) {
                html = DEFAULT.stripCommentTag(html);
              }
              var stripIgnoreTagBody = false;
              if (options.stripIgnoreTagBody) {
                var stripIgnoreTagBody = DEFAULT.StripTagBody(
                  options.stripIgnoreTagBody,
                  onIgnoreTag
                );
                onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
              }
              var retHtml = parseTag(
                html,
                function(sourcePosition, position, tag, html2, isClosing) {
                  var info = {
                    sourcePosition,
                    position,
                    isClosing,
                    isWhite: whiteList.hasOwnProperty(tag)
                  };
                  var ret = onTag(tag, html2, info);
                  if (!isNull(ret))
                    return ret;
                  if (info.isWhite) {
                    if (info.isClosing) {
                      return "</" + tag + ">";
                    }
                    var attrs = getAttrs(html2);
                    var whiteAttrList = whiteList[tag];
                    var attrsHtml = parseAttr(attrs.html, function(name, value) {
                      var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
                      var ret2 = onTagAttr(tag, name, value, isWhiteAttr);
                      if (!isNull(ret2))
                        return ret2;
                      if (isWhiteAttr) {
                        value = safeAttrValue(tag, name, value, cssFilter);
                        if (value) {
                          return name + '="' + value + '"';
                        } else {
                          return name;
                        }
                      } else {
                        var ret2 = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
                        if (!isNull(ret2))
                          return ret2;
                        return;
                      }
                    });
                    var html2 = "<" + tag;
                    if (attrsHtml)
                      html2 += " " + attrsHtml;
                    if (attrs.closing)
                      html2 += " /";
                    html2 += ">";
                    return html2;
                  } else {
                    var ret = onIgnoreTag(tag, html2, info);
                    if (!isNull(ret))
                      return ret;
                    return escapeHtml(html2);
                  }
                },
                escapeHtml
              );
              if (stripIgnoreTagBody) {
                retHtml = stripIgnoreTagBody.remove(retHtml);
              }
              return retHtml;
            };
            module2.exports = FilterXSS;
          }
          /******/
        ])["default"]
      );
    });
  }
});
export default require_preview();
//# sourceMappingURL=@kangc_v-md-editor_lib_preview.js.map
